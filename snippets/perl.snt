;sub
sub <<>> {
	my ( <<>> ) = @_;
	<<>>
}
;end

;for
for my <<var>> ( <<list>> ) {
	<<>>
}
;end

;while
while ( <<>> ) {
    <<>>
}
;end

;if
if ( <<>> ) {
	<<>>
}
;end

;else
else {
	<<>>
}
;end

;elsif
elsif( <<>> ) {
	<<>>
}
;end


;sh
my <<>> = shift;<<>>
;end

;shs
my ( <<>> ) = @_;<<>>
;end

;udp
use Data::Dumper::Simple;<<>>
;end

;dp
warn Dumper( <<>> );
;end

;udt
use DateTime;<<>>
;end

;dt
my <<var>> = DateTime-><<method>>( <<parameters>> );
;end

;dtnew
my <<var>> = DateTime->new( <<parameters>> );
;end

;dtnow
DateTime->now;<<>>
;end

;new
sub new {
	my $class = shift;
	my $self = {
		<<>>
		};
	<<>>
	bless $self,$class;
	<<>>
	return $self;
}
;end

;o
open( <<filehandler>> , "<<operator>>", <<filename>> ) 
	or die "Cannot open <<filename>> - $!";
;end

;pkg
package <<modname>>;
use strict;
use warnings;
use utf8;

sub new {
	<<new>>
}

1;
;end

;tpl
template '<<path>>' => sub {
    <<>>
};
;end

;thread
use threads;
use threads::shared;
my <<threadname>> = threads->new( \\&<<functionname>>);
<<threadname>>-><<detachjoinyield>>;
<<>>
;end

;lwp
use LWP::Simple;
my <<var>> = get( <<url>> );
<<>>
;end

;b
BEGIN {
	<<>>
}
;end


;uit
use Iterator;
my <<iterator>> = Iterator->new ( <<subref>> );
<<>>
;end

;itv
my <<value>> = <<iterator>>->value();
<<>>
;end

;ite
<<iterator>>->is_exhausted()<<>>
;end

;itd
Iterator::is_done()<<>>
;end

;s
s{<<pattern>>}{<<needle>>}<<ig>>;<<>>
;end

;returnif
return <<>> if ( <<>> );
;end

;nextif
next if ( <<>> );
;end
